name: CI/CD Pipeline

on:
  push:
    tags: [ v* ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 客户端构建和测试
  client:
    name: Client Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Build client for all platforms
        run: |
          cd client
          make build-all

      - name: Upload client artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-binaries
          path: client/dist/
          retention-days: 30

  # 服务端构建和测试
  server:
    name: Server Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build server Docker image
        run: |
          cd server
          make build

      - name: Build multi-platform server image
        run: |
          cd server
          make build-multi


  # 发布
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [client, server, integration]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push client release
        run: |
          cd client
          make build-all

      - name: Build and push server release
        run: |
          cd server
          DOCKER_REGISTRY=${{ env.REGISTRY }} make build-push

      - name: Create Release Assets
        run: |
          cd client/dist
          for file in gottyp-*; do
            if [[ -f "$file" ]]; then
              echo "Creating asset for $file"
              # 这里可以添加压缩或其他处理
            fi
          done

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./client/dist/gottyp-linux-amd64
          asset_name: gottyp-linux-amd64
          asset_content_type: application/octet-stream 